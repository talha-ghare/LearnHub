================================================================================
LEARNHUB DJANGO PROJECT - COMPLETE CODE SUMMARY
================================================================================
Generated from: C:\Users\Admin\Desktop\New folder (4)\learnhub
Export Date: 2025-08-11 02:23:37
================================================================================

üìÅ PROJECT STRUCTURE:
------------------------------------------------------------
üìÅ üì¶ LearnHub Project/
  üêç export_project.py
  üìÑ learnhub_complete_code.txt
  üêç manage.py
  üìÑ requirements.txt
  üìÅ accounts/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py
  üìÅ courses/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py
    üìÅ management/
      üêç __init__.py
      üìÅ commands/
        üêç __init__.py
        üêç load_sample_data.py
  üìÅ learnhub/
    üêç __init__.py
    üêç asgi.py
    üêç settings.py
    üêç urls.py
    üêç wsgi.py
  üìÅ media/
  üìÅ ratings/
    üêç admin.py
    üêç models.py
  üìÅ static/
  üìÅ templates/
  üìÅ videos/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py

================================================================================
üìã FILE CONTENTS:
================================================================================


======================================================================
üêç PYTHON FILE: export_project.py
======================================================================
import os
import fnmatch

def should_exclude(path, filename):
    """Check if file/folder should be excluded based on Django project patterns"""
    exclude_patterns = [
        # Python compiled files
        '*.pyc',
        '*.pyo',
        '*.pyd',
        '__pycache__',
        
        # Database files
        '*.sqlite3',
        '*.db',
        
        # Environment and config
        '.env',
        '.env.local',
        '.env.production',
        '*.log',
        
        # Version control
        '.git',
        '.gitignore',
        '.gitattributes',
        
        # IDEs and editors
        '.vscode',
        '.idea',
        '*.swp',
        '*.swo',
        '*~',
        '.DS_Store',
        'Thumbs.db',
        
        # Virtual environments
        'venv',
        'env',
        '*_env',
        '.venv',
        'virtualenv',
        
        # Dependencies
        'node_modules',
        'bower_components',
        
        # Media files (images, videos, etc.)
        '*.jpg',
        '*.jpeg',
        '*.png',
        '*.gif',
        '*.svg',
        '*.ico',
        '*.mp4',
        '*.avi',
        '*.mov',
        '*.wmv',
        '*.mkv',
        '*.mp3',
        '*.wav',
        '*.pdf',
        '*.doc',
        '*.docx',
        
        # Compressed files
        '*.zip',
        '*.rar',
        '*.tar',
        '*.gz',
        
        # Django specific
        'migrations',  # Will exclude migration files
        '*.pot',
        '*.mo',
        
        # Static files (if collected)
        'staticfiles',
        'collected_static',
        
        # Cache files
        '.cache',
        '*.cache',
        
        # Minified files
        '*.min.js',
        '*.min.css',
        
        # Third-party libraries
        'bootstrap*',
        'jquery*',
        'fontawesome*',
        'vendor',
        'libs',
        'libraries',
        
        # Build files
        'dist',
        'build',
        '*.egg-info',
        
        # Temporary files
        'tmp',
        'temp',
        '*.tmp',
        '*.temp',
        
        # Coverage reports
        'htmlcov',
        '.coverage',
        'coverage.xml',
        
        # Pytest
        '.pytest_cache',
        
        # Django debug toolbar
        'debug_toolbar',
        
        # Local settings that might contain secrets
        'local_settings.py',
        'settings_local.py',
    ]

    for pattern in exclude_patterns:
        if fnmatch.fnmatch(filename.lower(), pattern.lower()) or pattern.lower() in path.lower():
            return True
    
    # Also exclude specific directories
    exclude_dirs = ['__pycache__', '.git', 'node_modules', 'venv', 'env', 'media', 'static']
    if any(exclude_dir in path for exclude_dir in exclude_dirs):
        return True
        
    return False

def get_file_content(filepath):
    """Read file content with proper encoding handling"""
    encodings = ['utf-8', 'utf-8-sig', 'latin1', 'cp1252', 'iso-8859-1']

    for encoding in encodings:
        try:
            with open(filepath, 'r', encoding=encoding) as f:
                content = f.read()
                # Limit very large files
                if len(content) > 50000:  # 50KB limit
                    return content[:50000] + "\n\n[FILE TRUNCATED - Too large to display completely]"
                return content
        except UnicodeDecodeError:
            continue
        except Exception as e:
            return f"Error reading file: {str(e)}"

    return "Could not read file due to encoding issues"

def is_important_file(filepath, filename):
    """Check if file is important for Django project understanding"""
    important_extensions = [
        '.py',      # Python files
        '.html',    # Templates
        '.css',     # Styles
        '.js',      # JavaScript
        '.json',    # Configuration files
        '.txt',     # Requirements, README, etc.
        '.md',      # Markdown files
        '.yml',     # YAML config
        '.yaml',    # YAML config
        '.toml',    # TOML config
        '.cfg',     # Config files
        '.ini',     # Config files
        '.conf',    # Config files
    ]
    
    important_filenames = [
        'manage.py',
        'requirements.txt',
        'requirements-dev.txt',
        'README.md',
        'README.txt',
        'Procfile',
        'runtime.txt',
        'Dockerfile',
        'docker-compose.yml',
        'setup.py',
        'setup.cfg',
        'pyproject.toml',
        '.env.example',
        'Makefile',
    ]
    
    file_ext = os.path.splitext(filename)[1].lower()
    
    return (file_ext in important_extensions or 
            filename.lower() in [f.lower() for f in important_filenames])

def generate_django_project_summary(root_dir, output_file):
    """Generate comprehensive Django project summary"""
    with open(output_file, 'w', encoding='utf-8') as out:
        out.write("="*80 + "\n")
        out.write("LEARNHUB DJANGO PROJECT - COMPLETE CODE SUMMARY\n")
        out.write("="*80 + "\n")
        out.write(f"Generated from: {root_dir}\n")
        out.write(f"Export Date: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        out.write("="*80 + "\n\n")

        # Write project structure first
        out.write("üìÅ PROJECT STRUCTURE:\n")
        out.write("-"*60 + "\n")

        for root, dirs, files in os.walk(root_dir):
            # Filter out excluded directories early
            dirs[:] = [d for d in dirs if not should_exclude(root, d)]

            level = root.replace(root_dir, '').count(os.sep)
            indent = "  " * level
            folder_name = os.path.basename(root) if root != root_dir else "üì¶ LearnHub Project"
            out.write(f"{indent}üìÅ {folder_name}/\n")

            sub_indent = "  " * (level + 1)
            for file in sorted(files):
                if not should_exclude(root, file) and is_important_file(root, file):
                    # Add file type emoji
                    if file.endswith('.py'):
                        emoji = "üêç"
                    elif file.endswith('.html'):
                        emoji = "üìÑ"
                    elif file.endswith(('.css', '.scss')):
                        emoji = "üé®"
                    elif file.endswith('.js'):
                        emoji = "‚ö°"
                    elif file.endswith(('.json', '.yml', '.yaml')):
                        emoji = "‚öôÔ∏è"
                    elif file.endswith('.md'):
                        emoji = "üìù"
                    else:
                        emoji = "üìÑ"
                    
                    out.write(f"{sub_indent}{emoji} {file}\n")

        out.write("\n" + "="*80 + "\n")
        out.write("üìã FILE CONTENTS:\n")
        out.write("="*80 + "\n\n")

        file_count = 0
        
        # Process all important files
        for root, dirs, files in os.walk(root_dir):
            # Filter out excluded directories
            dirs[:] = [d for d in dirs if not should_exclude(root, d)]

            for file in sorted(files):
                filepath = os.path.join(root, file)

                if (should_exclude(root, file) or 
                    not is_important_file(root, file)):
                    continue

                relative_path = os.path.relpath(filepath, root_dir)
                file_count += 1

                # Add file type indicator
                if file.endswith('.py'):
                    file_type = "üêç PYTHON FILE"
                elif file.endswith('.html'):
                    file_type = "üìÑ HTML TEMPLATE"
                elif file.endswith('.css'):
                    file_type = "üé® CSS STYLESHEET"
                elif file.endswith('.js'):
                    file_type = "‚ö° JAVASCRIPT"
                elif file.endswith('.json'):
                    file_type = "‚öôÔ∏è JSON CONFIG"
                elif file.endswith('.md'):
                    file_type = "üìù MARKDOWN"
                elif file.endswith('.txt'):
                    file_type = "üìÑ TEXT FILE"
                else:
                    file_type = "üìÑ FILE"

                out.write(f"\n{'='*70}\n")
                out.write(f"{file_type}: {relative_path}\n")
                out.write(f"{'='*70}\n")

                content = get_file_content(filepath)
                out.write(content)
                out.write("\n")

        out.write(f"\n{'='*80}\n")
        out.write(f"üìä SUMMARY: Exported {file_count} files from LearnHub Django Project\n")
        out.write(f"{'='*80}\n")

def main():
    """Main function to run the export"""
    # Get current directory (project root)
    project_root = os.getcwd()
    output_filename = "learnhub_complete_code.txt"

    print("üöÄ LearnHub Project Code Exporter")
    print("="*50)
    print(f"üìÇ Scanning project directory: {project_root}")
    print(f"üìÑ Output file: {output_filename}")
    print("\nüîç Processing files...")

    try:
        generate_django_project_summary(project_root, output_filename)
        
        # Get file size
        file_size = os.path.getsize(output_filename)
        size_mb = file_size / (1024 * 1024)
        
        print(f"\n‚úÖ Project export completed successfully!")
        print(f"üìÑ File saved as: {output_filename}")
        print(f"üìä File size: {size_mb:.2f} MB")
        print(f"üìÅ Location: {os.path.abspath(output_filename)}")
        print(f"\nüí° You can now share this file with any AI model or developer!")
        
    except Exception as e:
        print(f"‚ùå Error occurred: {str(e)}")
        print("Please check file permissions and try again.")

if __name__ == "__main__":
    main()


======================================================================
üìÑ TEXT FILE: learnhub_complete_code.txt
======================================================================
================================================================================
LEARNHUB DJANGO PROJECT - COMPLETE CODE SUMMARY
================================================================================
Generated from: C:\Users\Admin\Desktop\New folder (4)\learnhub
Export Date: 2025-08-11 02:23:37
================================================================================

üìÅ PROJECT STRUCTURE:
------------------------------------------------------------
üìÅ üì¶ LearnHub Project/
  üêç export_project.py
  üìÑ learnhub_complete_code.txt
  üêç manage.py
  üìÑ requirements.txt
  üìÅ accounts/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py
  üìÅ courses/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py
    üìÅ management/
      üêç __init__.py
      üìÅ commands/
        üêç __init__.py
        üêç load_sample_data.py
  üìÅ learnhub/
    üêç __init__.py
    üêç asgi.py
    üêç settings.py
    üêç urls.py
    üêç wsgi.py
  üìÅ media/
  üìÅ ratings/
    üêç admin.py
    üêç models.py
  üìÅ static/
  üìÅ templates/
  üìÅ videos/
    üêç __init__.py
    üêç admin.py
    üêç apps.py
    üêç forms.py
    üêç models.py
    üêç tests.py
    üêç urls.py
    üêç views.py

================================================================================
üìã FILE CONTENTS:
================================================================================


======================================================================
üêç PYTHON FILE: export_project.py
======================================================================
import os
import fnmatch

def should_exclude(path, filename):
    """Check if file/folder should be excluded based on Django project patterns"""
    exclude_patterns = [
        # Python compiled files
        '*.pyc',
        '*.pyo',
        '*.pyd',
        '__pycache__',
        
        # Database files
        '*.sqlite3',
        '*.db',
        
        # Environment and config
        '.env',
        '.env.local',
        '.env.production',
        '*.log',
        
        # Version control
        '.git',
        '.gitignore',
        '.gitattributes',
        
        # IDEs and editors
        '.vscode',
        '.idea',
        '*.swp',
        '*.swo',
        '*~',
        '.DS_Store',
        'Thumbs.db',
        
        # Virtual environments
        'venv',
        'env',
        '*_env',
        '.venv',
        'virtualenv',
        
        # Dependencies
        'node_modules',
        'bower_components',
        
        # Media files (images, videos, etc.)
        '*.jpg',
        '*.jpeg',
        '*.png',
        '*.gif',
        '*.svg',
        '*.ico',
        '*.mp4',
        '*.avi',
        '*.mov',
        '*.wmv',
        '*.mkv',
        '*.mp3',
        '*.wav',
        '*.pdf',
        '*.doc',
        '*.docx',
        
        # Compressed files
        '*.zip',
        '*.rar',
        '*.tar',
        '*.gz',
        
        # Django specific
        'migrations',  # Will exclude migration files
        '*.pot',
        '*.mo',
        
        # Static files (if collected)
        'staticfiles',
        'collected_static',
        
        # Cache files
        '.cache',
        '*.cache',
        
        # Minified files
        '*.min.js',
        '*.min.css',
        
        # Third-party libraries
        'bootstrap*',
        'jquery*',
        'fontawesome*',
        'vendor',
        'libs',
        'libraries',
        
        # Build files
        'dist',
        'build',
        '*.egg-info',
        
        # Temporary files
        'tmp',
        'temp',
        '*.tmp',
        '*.temp',
        
        # Coverage reports
        'htmlcov',
        '.coverage',
        'coverage.xml',
        
        # Pytest
        '.pytest_cache',
        
        # Django debug toolbar
        'debug_toolbar',
        
        # Local settings that might contain secrets
        'local_settings.py',
        'settings_local.py',
    ]

    for pattern in exclude_patterns:
        if fnmatch.fnmatch(filename.lower(), pattern.lower()) or pattern.lower() in path.lower():
            return True
    
    # Also exclude specific directories
    exclude_dirs = ['__pycache__', '.git', 'node_modules', 'venv', 'env', 'media', 'static']
    if any(exclude_dir in path for exclude_dir in exclude_dirs):
        return True
        
    return False

def get_file_content(filepath):
    """Read file content with proper encoding handling"""
    encodings = ['utf-8', 'utf-8-sig', 'latin1', 'cp1252', 'iso-8859-1']

    for encoding in encodings:
        try:
            with open(filepath, 'r', encoding=encoding) as f:
                content = f.read()
                # Limit very large files
                if len(content) > 50000:  # 50KB limit
                    return content[:50000] + "\n\n[FILE TRUNCATED - Too large to display completely]"
                return content
        except UnicodeDecodeError:
            continue
        except Exception as e:
            return f"Error reading file: {str(e)}"

    return "Could not read file due to encoding issues"

def is_important_file(filepath, filename):
    """Check if file is important for Django project understanding"""
    important_extensions = [
        '.py',      # Python files
        '.html',    # Templates
        '.css',     # Styles
        '.js',      # JavaScript
        '.json',    # Configuration files
        '.txt',     # Requirements, README, etc.
        '.md',      # Markdown files
        '.yml',     # YAML config
        '.yaml',    # YAML config
        '.toml',    # TOML config
        '.cfg',     # Config files
        '.ini',     # Config files
        '.conf',    # Config files
    ]
    
    important_filenames = [
        'manage.py',
        'requirements.txt',
        'requirements-dev.txt',
        'README.md',
        'README.txt',
        'Procfile',
        'runtime.txt',
        'Dockerfile',
        'docker-compose.yml',
        'setup.py',
        'setup.cfg',
        'pyproject.toml',
        '.env.example',
        'Makefile',
    ]
    
    file_ext = os.path.splitext(filename)[1].lower()
    
    return (file_ext in important_extensions or 
            filename.lower() in [f.lower() for f in important_filenames])

def generate_django_project_summary(root_dir, output_file):
    """Generate comprehensive Django project summary"""
    with open(output_file, 'w', encoding='utf-8') as out:
        out.write("="*80 + "\n")
        out.write("LEARNHUB DJANGO PROJECT - COMPLETE CODE SUMMARY\n")
        out.write("="*80 + "\n")
        out.write(f"Generated from: {root_dir}\n")
        out.write(f"Export Date: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        out.write("="*80 + "\n\n")

        # Write project structure first
        out.write("üìÅ PROJECT STRUCTURE:\n")
        out.write("-"*60 + "\n")

        for root, dirs, files in os.walk(root_dir):
            # Filter out excluded directories early
            dirs[:] = [d for d in dirs if not should_exclude(root, d)]

            level = root.replace(root_dir, '').count(os.sep)
            indent = "  " * level
            folder_name = os.path.basename(root) if root != root_dir else "üì¶ LearnHub Project"
            out.write(f"{indent}üìÅ {folder_name}/\n")

            sub_indent = "  " * (level + 1)
            for file in sorted(files):
                if not should_exclude(root, file) and is_important_file(root, file):
                    # Add file type emoji
                    if file.endswith('.py'):
                        emoji = "üêç"
                    elif file.endswith('.html'):
                        emoji = "üìÑ"
                    elif file.endswith(('.css', '.scss')):
                        emoji = "üé®"
                    elif file.endswith('.js'):
                        emoji = "‚ö°"
                    elif file.endswith(('.json', '.yml', '.yaml')):
                        emoji = "‚öôÔ∏è"
                    elif file.endswith('.md'):
                        emoji = "üìù"
                    else:
                        emoji = "üìÑ"
                    
                    out.write(f"{sub_indent}{emoji} {file}\n")

        out.write("\n" + "="*80 + "\n")
        out.write("üìã FILE CONTENTS:\n")
        out.write("="*80 + "\n\n")

        file_count = 0
        
        # Process all important files
        for root, dirs, files in os.walk(root_dir):
            # Filter out excluded directories
            dirs[:] = [d for d in dirs if not should_exclude(root, d)]

            for file in sorted(files):
                filepath = os.path.join(root, file)

                if (should_exclude(root, file) or 
                    not is_important_file(root, file)):
                    continue

                relative_path = os.path.relpath(filepath, root_dir)
                file_count += 1

                # Add file type indicator
                if file.endswith('.py'):
                    file_type = "üêç PYTHON FILE"
                elif file.endswith('.html'):
                    file_type = "üìÑ HTML TEMPLATE"
                elif file.endswith('.css'):
                    file_type = "üé® CSS STYLESHEET"
                elif file.endswith('.js'):
                    file_type = "‚ö° JAVASCRIPT"
                elif file.endswith('.json'):
                    file_type = "‚öôÔ∏è JSON CONFIG"
                elif file.endswith('.md'):
                    file_type = "üìù MARKDOWN"
                elif file.endswith('.txt'):
                    file_type = "üìÑ TEXT FILE"
                else:
                    file_type = "üìÑ FILE"

                out.write(f"\n{'='*70}\n")
                out.write(f"{file_type}: {relative_path}\n")
                out.write(f"{'='*70}\n")

                content = get_file_content(filepath)
                out.write(content)
                out.write("\n")

        out.write(f"\n{'='*80}\n")
        out.write(f"üìä SUMMARY: Exported {file_count} files from LearnHub Django Project\n")
        out.write(f"{'='*80}\n")

def main():
    """Main function to run the export"""
    # Get current directory (project root)
    project_root = os.getcwd()
    output_filename = "learnhub_complete_code.txt"

    print("üöÄ LearnHub Project Code Exporter")
    print("="*50)
    print(f"üìÇ Scanning project directory: {project_root}")
    print(f"üìÑ Output file: {output_filename}")
    print("\nüîç Processing files...")

    try:
        generate_django_project_summary(project_root, output_filename)
        
        # Get file size
        file_size = os.path.getsize(output_filename)
        size_mb = file_size / (1024 * 1024)
        
        print(f"\n‚úÖ Project export completed successfully!")
        print(f"üìÑ File saved as: {output_filename}")
        print(f"üìä File size: {size_mb:.2f} MB")
        print(f"üìÅ Location: {os.path.abspath(output_filename)}")
        print(f"\nüí° You can now share this file with any AI model or developer!")
        
    except Exception as e:
        print(f"‚ùå Error occurred: {str(e)}")
        print("Please check file permissions and try again.")

if __name__ == "__main__":
    main()


======================================================================
üêç PYTHON FILE: manage.py
======================================================================
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learnhub.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


======================================================================
üìÑ TEXT FILE: requirements.txt
======================================================================
asgiref==3.9.1
crispy-tailwind==1.0.3
Django==5.2.5
django-crispy-forms==2.4
djangorestframework==3.16.1
pillow==11.3.0
sqlparse==0.5.3
tzdata==2025.2


======================================================================
üêç PYTHON FILE: accounts\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: accounts\admin.py
======================================================================
## admin.py configurations

### accounts/admin.py

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import CustomUser

@admin.register(CustomUser)
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'user_type', 'first_name', 'last_name', 'is_staff')
    list_filter = ('user_type', 'is_staff', 'is_superuser', 'is_active')
    fieldsets = UserAdmin.fieldsets + (
        ('Additional Info', {'fields': ('user_type', 'profile_picture', 'bio')}),
    )
    add_fieldsets = UserAdmin.add_fieldsets + (
        ('Additional Info', {'fields': ('user_type', 'email', 'first_name', 'last_name')}),
    )

======================================================================
üêç PYTHON FILE: accounts\apps.py
======================================================================
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'accounts'


======================================================================
üêç PYTHON FILE: accounts\forms.py
======================================================================
### accounts/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import CustomUser

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = CustomUser
        fields = ('username', 'email', 'user_type', 'first_name', 'last_name')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.widget.attrs.update({'class': 'form-input'})


======================================================================
üêç PYTHON FILE: accounts\models.py
======================================================================
### accounts/models.py

from django.contrib.auth.models import AbstractUser
from django.db import models

class CustomUser(AbstractUser):
    USER_TYPE_CHOICES = (
        ('student', 'Student'),
        ('teacher', 'Teacher'),
    )
    user_type = models.CharField(max_length=10, choices=USER_TYPE_CHOICES, default='student')
    profile_picture = models.ImageField(upload_to='profiles/', blank=True, null=True)
    bio = models.TextField(max_length=500, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def is_teacher(self):
        return self.user_type == 'teacher'

    def is_student(self):
        return self.user_type == 'student'


======================================================================
üêç PYTHON FILE: accounts\tests.py
======================================================================
from django.test import TestCase

# Create your tests here.


======================================================================
üêç PYTHON FILE: accounts\urls.py
======================================================================
### accounts/urls.py

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('register/', views.register_view, name='register'),
    path('login/', auth_views.LoginView.as_view(template_name='accounts/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
    path('dashboard/', views.dashboard_view, name='dashboard'),
    path('profile/', views.profile_view, name='profile'),
]


======================================================================
üêç PYTHON FILE: accounts\views.py
======================================================================
# accounts/views.py
from django.shortcuts import render, redirect
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login
from django.contrib import messages
from .forms import CustomUserCreationForm
from courses.models import Course
from videos.models import Bookmark


def register_view(request):
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            messages.success(request, 'Registration successful!')
            return redirect('dashboard')
    else:
        form = CustomUserCreationForm()
    return render(request, 'accounts/register.html', {'form': form})


@login_required
def dashboard_view(request):
    context = {}
    
    if request.user.is_teacher():
        # Teacher dashboard
        my_courses = Course.objects.filter(teacher=request.user)
        context.update({
            'courses': my_courses,  # Changed from 'my_courses' to 'courses' to match template
            'total_courses': my_courses.count(),
            'total_videos': sum(course.videos.count() for course in my_courses)
        })
        template = 'accounts/teacher_dashboard.html'
    else:
        # Student dashboard
        bookmarked_videos = Bookmark.objects.filter(user=request.user).select_related('video', 'video__course')
        recent_courses = Course.objects.all()[:6]
        context.update({
            'bookmarked_videos': bookmarked_videos,
            'recent_courses': recent_courses,
            'total_bookmarks': bookmarked_videos.count()
        })
        template = 'accounts/student_dashboard.html'
    
    return render(request, template, context)


@login_required
def profile_view(request):
    """
    Profile view that redirects to appropriate dashboard.
    Since LearnHub uses role-based dashboards instead of traditional profile pages,
    we redirect users to their personalized dashboard.
    """
    return redirect('dashboard')


======================================================================
üêç PYTHON FILE: courses\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: courses\admin.py
======================================================================
### courses/admin.py

from django.contrib import admin
from .models import Course, Topic

@admin.register(Topic)
class TopicAdmin(admin.ModelAdmin):
    list_display = ('name', 'slug', 'created_at')
    prepopulated_fields = {'slug': ('name',)}
    search_fields = ('name',)

@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    list_display = ('title', 'teacher', 'topic', 'created_at')
    list_filter = ('topic', 'created_at', 'teacher')
    search_fields = ('title', 'description', 'teacher__username')
    prepopulated_fields = {'slug': ('title',)}
    raw_id_fields = ('teacher',)

======================================================================
üêç PYTHON FILE: courses\apps.py
======================================================================
from django.apps import AppConfig


class CoursesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'courses'


======================================================================
üêç PYTHON FILE: courses\forms.py
======================================================================
### courses/forms.py

from django import forms
from .models import Course, Topic

class CourseForm(forms.ModelForm):
    class Meta:
        model = Course
        fields = ['title', 'description', 'topic', 'thumbnail']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.widget.attrs.update({'class': 'form-input'})

class TopicForm(forms.ModelForm):
    class Meta:
        model = Topic
        fields = ['name', 'description']
        
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.widget.attrs.update({'class': 'form-input'})


======================================================================
üêç PYTHON FILE: courses\models.py
======================================================================
from django.db import models
from django.contrib.auth import get_user_model
from django.utils.text import slugify
from django.urls import reverse

User = get_user_model()

class Topic(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    slug = models.SlugField(unique=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['name']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('topic_detail', kwargs={'slug': self.slug})

class Course(models.Model):
    view_count = models.PositiveIntegerField(default=0)
    
    def increment_views(self):
        self.view_count += 1
        self.save(update_fields=['view_count'])
    
    def get_total_duration(self):
        """Returns total duration in minutes"""
        from datetime import timedelta
        total = sum(
            (video.duration.total_seconds() for video in self.videos.all() if video.duration),
            timedelta()
        )
        return round(total.total_seconds() / 60, 1)
    
    title = models.CharField(max_length=200)
    description = models.TextField()
    teacher = models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        limit_choices_to={'user_type': 'teacher'},
        related_name='taught_courses'
    )
    topic = models.ForeignKey(
        Topic,
        on_delete=models.CASCADE,
        related_name='courses'
    )
    thumbnail = models.ImageField(
        upload_to='course_thumbnails/',
        blank=True,
        null=True
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    slug = models.SlugField(unique=True, blank=True)
    is_active = models.BooleanField(default=True)

    class Meta:
        ordering = ['-created_at']
        verbose_name_plural = 'Courses'

    def save(self, *args, **kwargs):
        if not self.slug:
            base_slug = slugify(self.title)
            unique_slug = base_slug
            num = 1
            while Course.objects.filter(slug=unique_slug).exists():
                unique_slug = f"{base_slug}-{num}"
                num += 1
            self.slug = unique_slug
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('course_detail', kwargs={'slug': self.slug})

    def get_total_duration(self):
        """Calculate total course duration in minutes"""
        from datetime import timedelta
        total = sum(
            (video.duration.total_seconds() for video in self.videos.all() if video.duration),
            timedelta()
        )
        return total.total_seconds() / 60

    def get_student_count(self):
        """Count unique students enrolled in the course"""
        return (self.enrollments
                .filter(user__is_teacher=False)
                .distinct('user')
                .count())

    def increment_view_count(self):
        """Atomically increment view count"""
        self.view_count = models.F('view_count') + 1
        self.save(update_fields=['view_count'])

======================================================================
üêç PYTHON FILE: courses\tests.py
======================================================================
from django.test import TestCase

# Create your tests here.


======================================================================
üêç PYTHON FILE: courses\urls.py
======================================================================
### courses/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('', views.course_list, name='course_list'),
    path('topics/', views.topic_list, name='topic_list'),
    path('topics/<slug:slug>/', views.topic_detail, name='topic_detail'),
    path('create/', views.create_course, name='create_course'),
    path('<slug:slug>/', views.course_detail, name='course_detail'),
    path('create-topic/', views.create_topic, name='create_topic'),
]

======================================================================
üêç PYTHON FILE: courses\views.py
======================================================================
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.db import models  # Added this import
from .models import Course, Topic
from .forms import CourseForm, TopicForm
from django.db.models import Q

def course_list(request):
    try:
        courses = Course.objects.all().select_related('teacher', 'topic')
        topics = Topic.objects.all()
        
        # Search functionality - Parentheses now properly closed
        search_query = request.GET.get('search', '')
        if search_query:
            courses = courses.filter(
                Q(title__icontains=search_query) |
                Q(description__icontains=search_query) |
                Q(teacher__username__icontains=search_query) |
                Q(topic__name__icontains=search_query)
            )  # This parenthesis was missing
        
        # Topic filtering
        topic_filter = request.GET.get('topic')
        if topic_filter:
            courses = courses.filter(topic__slug=topic_filter)
        
        context = {
            'courses': courses,
            'topics': topics,
            'selected_topic': topic_filter,
            'search_query': search_query
        }
        return render(request, 'courses/course_list.html', context)
    
    except Exception as e:
        messages.error(request, 'Error loading courses. Please try again.')
        return render(request, 'courses/course_list.html', {'courses': [], 'topics': []})

def topic_list(request):
    try:
        topics = Topic.objects.all()
        return render(request, 'courses/topic_list.html', {'topics': topics})
    except Exception as e:
        messages.error(request, 'Error loading topics.')
        return render(request, 'courses/topic_list.html', {'topics': []})

def topic_detail(request, slug):
    try:
        topic = get_object_or_404(Topic, slug=slug)
        courses = Course.objects.filter(topic=topic).select_related('teacher')
        return render(request, 'courses/topic_detail.html', {
            'topic': topic,
            'courses': courses
        })
    except Http404:
        raise
    except Exception as e:
        messages.error(request, 'Error loading topic details.')
        return redirect('topic_list')

def course_detail(request, slug):
    try:
        course = get_object_or_404(Course, slug=slug)
        videos = course.videos.all()
        
        # Check if user is authenticated before counting view
        if request.user.is_authenticated:
            course.increment_views()
        
        # Calculate average rating safely
        rating_agg = course.ratings.aggregate(models.Avg('rating'))
        avg_rating = rating_agg['rating__avg'] if rating_agg else None
        
        context = {
            'course': course,
            'videos': videos,
            'is_teacher': request.user.is_authenticated and request.user == course.teacher,
            'average_rating': avg_rating
        }
        return render(request, 'courses/course_detail.html', context)
    
    except Http404:
        raise
    except Exception as e:
        messages.error(request, 'Error loading course details.')
        return redirect('course_list')

@login_required
def create_course(request):
    if not getattr(request.user, 'is_teacher', False):
        messages.error(request, 'Only teachers can create courses.')
        return redirect('course_list')
    
    try:
        if request.method == 'POST':
            form = CourseForm(request.POST, request.FILES)
            if form.is_valid():
                course = form.save(commit=False)
                course.teacher = request.user
                course.save()
                messages.success(request, 'Course created successfully!')
                return redirect('course_detail', slug=course.slug)
        else:
            form = CourseForm()
        
        return render(request, 'courses/create_course.html', {'form': form})
    
    except Exception as e:
        messages.error(request, 'Error creating course. Please try again.')
        return redirect('course_list')

@login_required
def create_topic(request):
    if not getattr(request.user, 'is_teacher', False):
        messages.error(request, 'Only teachers can create topics.')
        return redirect('topic_list')
    
    try:
        if request.method == 'POST':
            form = TopicForm(request.POST)
            if form.is_valid():
                topic = form.save()
                messages.success(request, f'Topic "{topic.name}" created successfully!')
                return redirect('topic_detail', slug=topic.slug)
        else:
            form = TopicForm()
        
        return render(request, 'courses/create_topic.html', {'form': form})
    
    except Exception as e:
        messages.error(request, 'Error creating topic. Please try again.')
        return redirect('topic_list')

======================================================================
üêç PYTHON FILE: courses\management\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: courses\management\commands\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: courses\management\commands\load_sample_data.py
======================================================================
# courses/management/commands/load_sample_data.py
from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from courses.models import Topic, Course
from videos.models import Video, Comment, Bookmark
import random
from datetime import timedelta
from django.utils import timezone

User = get_user_model()

class Command(BaseCommand):
    help = 'Load sample data for LearnHub'
    
    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('Starting to load sample data...'))
        
        # Create sample data
        self.create_users()
        self.create_topics()
        self.create_courses()
        self.create_videos()
        self.create_interactions()
        
        self.stdout.write(
            self.style.SUCCESS('Successfully loaded sample data!')
        )
    
    def create_users(self):
        self.stdout.write('Creating users...')
        
        # Teachers
        teachers_data = [
            {
                'username': 'john_teacher',
                'email': 'john@learnhub.com',
                'first_name': 'John',
                'last_name': 'Smith',
                'user_type': 'teacher',
                'bio': 'Web development expert with 10+ years experience'
            },
            {
                'username': 'sarah_dev',
                'email': 'sarah@learnhub.com',
                'first_name': 'Sarah',
                'last_name': 'Johnson',
                'user_type': 'teacher',
                'bio': 'Data science and Python specialist'
            },
            {
                'username': 'mike_designer',
                'email': 'mike@learnhub.com',
                'first_name': 'Mike',
                'last_name': 'Chen',
                'user_type': 'teacher',
                'bio': 'UX/UI design and creative professional'
            },
            {
                'username': 'lisa_mobile',
                'email': 'lisa@learnhub.com',
                'first_name': 'Lisa',
                'last_name': 'Garcia',
                'user_type': 'teacher',
                'bio': 'Mobile app development and React Native expert'
            }
        ]
        
        # Students
        students_data = [
            {
                'username': 'alex_student',
                'email': 'alex@student.com',
                'first_name': 'Alex',
                'last_name': 'Wilson',
                'user_type': 'student'
            },
            {
                'username': 'emma_learner',
                'email': 'emma@student.com',
                'first_name': 'Emma',
                'last_name': 'Brown',
                'user_type': 'student'
            },
            {
                'username': 'david_coder',
                'email': 'david@student.com',
                'first_name': 'David',
                'last_name': 'Lee',
                'user_type': 'student'
            },
            {
                'username': 'sophia_designer',
                'email': 'sophia@student.com',
                'first_name': 'Sophia',
                'last_name': 'Taylor',
                'user_type': 'student'
            }
        ]
        
        for user_data in teachers_data + students_data:
            if not User.objects.filter(username=user_data['username']).exists():
                user = User.objects.create_user(
                    password='password123',
                    **user_data
                )
                self.stdout.write(f"Created user: {user.username}")
    
    def create_topics(self):
        self.stdout.write('Creating topics...')
        
        topics_data = [
            {
                'name': 'Web Development',
                'description': 'Frontend and backend web development technologies'
            },
            {
                'name': 'Data Science',
                'description': 'Data analysis, machine learning, and statistics'
            },
            {
                'name': 'Mobile Development',
                'description': 'iOS, Android, and cross-platform mobile app development'
            },
            {
                'name': 'Design',
                'description': 'UI/UX design, graphic design, and creative tools'
            },
            {
                'name': 'Programming Fundamentals',
                'description': 'Basic programming concepts and languages'
            },
            {
                'name': 'Cloud Computing',
                'description': 'AWS, Azure, Google Cloud, and DevOps'
            }
        ]
        
        for topic_data in topics_data:
            topic, created = Topic.objects.get_or_create(
                name=topic_data['name'],
                defaults=topic_data
            )
            if created:
                self.stdout.write(f"Created topic: {topic.name}")
    
    def create_courses(self):
        self.stdout.write('Creating courses...')
        
        courses_data = [
            {
                'title': 'Complete React.js Course for Beginners',
                'description': 'Learn React from scratch with hands-on projects. Build modern web applications using React hooks, components, and state management.',
                'teacher_username': 'john_teacher',
                'topic_name': 'Web Development'
            },
            {
                'title': 'Python Data Science Masterclass',
                'description': 'Master data science with Python. Learn pandas, numpy, matplotlib, and machine learning algorithms with real-world datasets.',
                'teacher_username': 'sarah_dev',
                'topic_name': 'Data Science'
            },
            {
                'title': 'React Native Mobile App Development',
                'description': 'Build cross-platform mobile apps with React Native. Create iOS and Android apps with a single codebase.',
                'teacher_username': 'lisa_mobile',
                'topic_name': 'Mobile Development'
            },
            {
                'title': 'UX/UI Design Fundamentals',
                'description': 'Learn user experience and interface design principles. Master Figma, design thinking, and user research.',
                'teacher_username': 'mike_designer',
                'topic_name': 'Design'
            },
            {
                'title': 'JavaScript ES6+ Modern Features',
                'description': 'Advanced JavaScript concepts including async/await, modules, destructuring, and modern ES6+ features.',
                'teacher_username': 'john_teacher',
                'topic_name': 'Programming Fundamentals'
            },
            {
                'title': 'AWS Cloud Practitioner Certification',
                'description': 'Comprehensive AWS cloud computing course covering EC2, S3, Lambda, and core AWS services.',
                'teacher_username': 'sarah_dev',
                'topic_name': 'Cloud Computing'
            },
            {
                'title': 'Full Stack Django Development',
                'description': 'Build complete web applications with Django. Learn models, views, templates, and deployment.',
                'teacher_username': 'john_teacher',
                'topic_name': 'Web Development'
            },
            {
                'title': 'Machine Learning with Python',
                'description': 'Practical machine learning course covering algorithms, scikit-learn, and real-world applications.',
                'teacher_username': 'sarah_dev',
                'topic_name': 'Data Science'
            }
        ]
        
        for course_data in courses_data:
            try:
                teacher = User.objects.get(username=course_data['teacher_username'])
                topic = Topic.objects.get(name=course_data['topic_name'])
                
                course, created = Course.objects.get_or_create(
                    title=course_data['title'],
                    defaults={
                        'description': course_data['description'],
                        'teacher': teacher,
                        'topic': topic
                    }
                )
                if created:
                    self.stdout.write(f"Created course: {course.title}")
            except (User.DoesNotExist, Topic.DoesNotExist) as e:
                self.stdout.write(f"Error creating course: {e}")
    
    def create_videos(self):
        self.stdout.write('Creating videos...')
        
        # Sample video data for each course
        videos_data = {
            'Complete React.js Course for Beginners': [
                'Introduction to React and Setup',
                'React Components and JSX',
                'State and Props Management',
                'Event Handling in React',
                'React Hooks - useState and useEffect',
                'Building a Todo App Project',
                'React Router for Navigation',
                'API Integration with Fetch'
            ],
            'Python Data Science Masterclass': [
                'Python Fundamentals for Data Science',
                'Introduction to Pandas DataFrames',
                'Data Cleaning and Preprocessing',
                'Data Visualization with Matplotlib',
                'Statistical Analysis Basics',
                'Machine Learning Introduction',
                'Linear Regression Project',
                'Model Evaluation and Metrics'
            ],
            'React Native Mobile App Development': [
                'React Native Setup and Environment',
                'Navigation in React Native',
                'Building Native Components',
                'State Management in Mobile Apps',
                'API Integration and Networking',
                'Camera and Media Features',
                'Publishing to App Stores',
                'Performance Optimization'
            ],
            'UX/UI Design Fundamentals': [
                'Design Thinking Process',
                'User Research Methods',
                'Wireframing and Prototyping',
                'Color Theory and Typography',
                'Figma Masterclass',
                'Mobile-First Design',
                'Usability Testing',
                'Design System Creation'
            ]
        }
        
        for course_title, video_titles in videos_data.items():
            try:
                course = Course.objects.get(title=course_title)
                for i, video_title in enumerate(video_titles):
                    video, created = Video.objects.get_or_create(
                        title=video_title,
                        course=course,
                        defaults={
                            'description': f"Learn {video_title.lower()} in this comprehensive lesson.",
                            'order': i + 1
                        }
                    )
                    if created:
                        self.stdout.write(f"Created video: {video.title}")
            except Course.DoesNotExist:
                continue
    
    def create_interactions(self):
        self.stdout.write('Creating interactions...')
        
        # Create bookmarks
        students = User.objects.filter(user_type='student')
        videos = Video.objects.all()
        
        if students.exists() and videos.exists():
            for student in students:
                # Each student bookmarks 3-7 random videos
                bookmark_count = random.randint(3, min(7, len(videos)))
                random_videos = random.sample(list(videos), bookmark_count)
                
                for video in random_videos:
                    Bookmark.objects.get_or_create(
                        user=student,
                        video=video
                    )
        
        # Create comments
        comment_templates = [
            "Great explanation! This helped me understand the concept much better.",
            "Could you provide more examples for this topic?",
            "Excellent tutorial! Very clear and easy to follow.",
            "This is exactly what I was looking for. Thank you!",
            "Can you make a follow-up video on advanced topics?",
            "Perfect pacing and great examples throughout.",
            "I've been struggling with this concept, but now it makes sense!",
            "Really appreciate the practical approach in this video."
        ]
        
        for video in videos:
            # Each video gets 1-4 random comments
            comment_count = random.randint(1, 4)
            for _ in range(comment_count):
                if students.exists():
                    student = random.choice(students)
                    comment_text = random.choice(comment_templates)
                    
                    Comment.objects.get_or_create(
                        user=student,
                        video=video,
                        content=comment_text,
                        defaults={
                            'created_at': timezone.now() - timedelta(
                                days=random.randint(1, 30)
                            )
                        }
                    )
        
        self.stdout.write("Created sample interactions (bookmarks and comments)")


======================================================================
üêç PYTHON FILE: learnhub\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: learnhub\asgi.py
======================================================================
"""
ASGI config for learnhub project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learnhub.settings')

application = get_asgi_application()


======================================================================
üêç PYTHON FILE: learnhub\settings.py
======================================================================
# learnhub/settings.py

import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'your-secret-key-here'
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_tailwind',
    'accounts',
    'courses',
    'videos',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'learnhub.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Auth
AUTH_USER_MODEL = 'accounts.CustomUser'
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'home'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"


======================================================================
üêç PYTHON FILE: learnhub\urls.py
======================================================================
### learnhub/urls.py

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static
from django.views.generic import TemplateView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', TemplateView.as_view(template_name='home.html'), name='home'),
    path('accounts/', include('accounts.urls')),
    path('courses/', include('courses.urls')),
    path('videos/', include('videos.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)


======================================================================
üêç PYTHON FILE: learnhub\wsgi.py
======================================================================
"""
WSGI config for learnhub project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learnhub.settings')

application = get_wsgi_application()


======================================================================
üêç PYTHON FILE: ratings\admin.py
======================================================================
# ratings/admin.py
from django.contrib import admin
from .models import CourseRating

admin.site.register(CourseRating)

======================================================================
üêç PYTHON FILE: ratings\models.py
======================================================================
from django.db import models
from django.contrib.auth import get_user_model
from courses.models import Course

User = get_user_model()

class CourseRating(models.Model):
    RATING_CHOICES = [
        (1, '‚òÖ‚òÜ‚òÜ‚òÜ‚òÜ'),
        (2, '‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ'),
        (3, '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ'),
        (4, '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ'),
        (5, '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ')
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    course = models.ForeignKey(Course, on_delete=models.CASCADE)
    rating = models.PositiveSmallIntegerField(choices=RATING_CHOICES)
    review = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ('user', 'course')
    
    def __str__(self):
        return f"{self.user.username} rated {self.course.title} {self.rating} stars"

======================================================================
üêç PYTHON FILE: videos\__init__.py
======================================================================


======================================================================
üêç PYTHON FILE: videos\admin.py
======================================================================
### videos/admin.py
from django.contrib import admin
from .models import Video, Bookmark, Comment
from .models import VideoProgress

admin.site.register(VideoProgress)

@admin.register(Video)
class VideoAdmin(admin.ModelAdmin):
    list_display = ('title', 'course', 'order', 'created_at')
    list_filter = ('course__topic', 'created_at')
    search_fields = ('title', 'description', 'course__title')
    ordering = ('course', 'order')

@admin.register(Bookmark)
class BookmarkAdmin(admin.ModelAdmin):
    list_display = ('user', 'video', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'video__title')

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = ('user', 'video', 'created_at')
    list_filter = ('created_at',)
    search_fields = ('user__username', 'video__title', 'content')
    ordering = ('-created_at',)

======================================================================
üêç PYTHON FILE: videos\apps.py
======================================================================
from django.apps import AppConfig


class VideosConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'videos'


======================================================================
üêç PYTHON FILE: videos\forms.py
======================================================================
### videos/forms.py

from django import forms
from .models import Video, Comment

class VideoForm(forms.ModelForm):
    class Meta:
        model = Video
        fields = ['title', 'description', 'video_file', 'thumbnail', 'order']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field in self.fields.values():
            field.widget.attrs.update({'class': 'form-input'})

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={'rows': 3, 'placeholder': 'Add a comment...'}),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.fields['content'].widget.attrs.update({'class': 'form-textarea'})


======================================================================
üêç PYTHON FILE: videos\models.py
======================================================================
### videos/models.py

from django.db import models
from django.contrib.auth import get_user_model
from courses.models import Course

User = get_user_model()

class Video(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='videos')
    video_file = models.FileField(upload_to='videos/')
    thumbnail = models.ImageField(upload_to='video_thumbnails/', blank=True, null=True)
    duration = models.DurationField(null=True, blank=True)
    order = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    view_count = models.PositiveIntegerField(default=0)
    
    def increment_views(self):
        self.view_count += 1
        self.save(update_fields=['view_count'])

    class Meta:
        ordering = ['order', 'created_at']

    def __str__(self):
        return f"{self.course.title} - {self.title}"

class Bookmark(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    video = models.ForeignKey(Video, on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'video')

    def __str__(self):
        return f"{self.user.username} - {self.video.title}"

class Comment(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    video = models.ForeignKey(Video, on_delete=models.CASCADE, related_name='comments')
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} on {self.video.title}"
    
class VideoProgress(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    video = models.ForeignKey(Video, on_delete=models.CASCADE)
    watched_seconds = models.PositiveIntegerField(default=0)
    completed = models.BooleanField(default=False)
    last_watched = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ('user', 'video')
    
    @property
    def progress_percentage(self):
        if self.video.duration:
            return min(round((self.watched_seconds / self.video.duration.total_seconds()) * 100, 100))
        return 0

======================================================================
üêç PYTHON FILE: videos\tests.py
======================================================================
from django.test import TestCase

# Create your tests here.


======================================================================
üêç PYTHON FILE: videos\urls.py
======================================================================
### videos/urls.py

from django.urls import path
from . import views

urlpatterns = [
    path('upload/<int:course_id>/', views.upload_video, name='upload_video'),
    path('<int:video_id>/', views.video_detail, name='video_detail'),
    path('<int:video_id>/bookmark/', views.toggle_bookmark, name='toggle_bookmark'),
    path('<int:video_id>/comment/', views.add_comment, name='add_comment'),
]

======================================================================
üêç PYTHON FILE: videos\views.py
======================================================================
## videos/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.http import require_POST
from .models import Video, Bookmark, Comment
from .forms import VideoForm, CommentForm
from courses.models import Course

@login_required
def upload_video(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    
    # Only course teacher can upload videos
    if request.user != course.teacher:
        messages.error(request, 'You can only upload videos to your own courses.')
        return redirect('course_detail', slug=course.slug)
    
    if request.method == 'POST':
        form = VideoForm(request.POST, request.FILES)
        if form.is_valid():
            video = form.save(commit=False)
            video.course = course
            video.save()
            messages.success(request, 'Video uploaded successfully!')
            return redirect('course_detail', slug=course.slug)
    else:
        form = VideoForm()
    
    return render(request, 'videos/upload_video.html', {
        'form': form,
        'course': course
    })

def video_detail(request, video_id):
    video = get_object_or_404(Video, id=video_id)
    comments = video.comments.all().select_related('user')
    
    # Check if user has bookmarked this video
    is_bookmarked = False
    if request.user.is_authenticated:
        is_bookmarked = Bookmark.objects.filter(user=request.user, video=video).exists()
    
    # Handle comment form
    comment_form = None
    if request.user.is_authenticated:
        if request.method == 'POST':
            comment_form = CommentForm(request.POST)
            if comment_form.is_valid():
                comment = comment_form.save(commit=False)
                comment.user = request.user
                comment.video = video
                comment.save()
                messages.success(request, 'Comment added successfully!')
                return redirect('video_detail', video_id=video.id)
        else:
            comment_form = CommentForm()
    
    context = {
        'video': video,
        'comments': comments,
        'is_bookmarked': is_bookmarked,
        'comment_form': comment_form,
    }
    return render(request, 'videos/video_detail.html', context)

@login_required
@require_POST
def toggle_bookmark(request, video_id):
    video = get_object_or_404(Video, id=video_id)
    bookmark, created = Bookmark.objects.get_or_create(
        user=request.user, 
        video=video
    )
    
    if not created:
        bookmark.delete()
        bookmarked = False
        message = 'Bookmark removed'
    else:
        bookmarked = True
        message = 'Video bookmarked'
    
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return JsonResponse({
            'bookmarked': bookmarked,
            'message': message
        })
    
    messages.success(request, message)
    return redirect('video_detail', video_id=video.id)

@login_required
def add_comment(request, video_id):
    video = get_object_or_404(Video, id=video_id)
    
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.user = request.user
            comment.video = video
            comment.save()
            messages.success(request, 'Comment added successfully!')
    
    return redirect('video_detail', video_id=video.id)


================================================================================
üìä SUMMARY: Exported 38 files from LearnHub Django Project
================================================================================
